
moving_head.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000306  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000306  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080006a  0080006a  000003a4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b07  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  00000b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000246  00000000  00000000  00000b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000b0  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000011e  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c8  00000000  00000000  00000f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000171  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000012d  00000000  00000000  000011ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	5a c0       	rjmp	.+180    	; 0xc4 <__vector_7>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	eb c0       	rjmp	.+470    	; 0x1ea <__vector_9>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e6 e0       	ldi	r30, 0x06	; 6
  36:	f3 e0       	ldi	r31, 0x03	; 3
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	aa 36       	cpi	r26, 0x6A	; 106
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	aa e6       	ldi	r26, 0x6A	; 106
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	ab 37       	cpi	r26, 0x7B	; 123
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	4e d1       	rcall	.+668    	; 0x2f2 <main>
  56:	55 c1       	rjmp	.+682    	; 0x302 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <datadirec_init>:
//ende Globale Variablen//


void datadirec_init(void){

	DDRA |=(1<<PA0)|(1<<PA1)|(1<<PA4)|(1<<PA5)|(1<<PA6);		// PA0 als Ausgang
  5a:	8a b3       	in	r24, 0x1a	; 26
  5c:	83 67       	ori	r24, 0x73	; 115
  5e:	8a bb       	out	0x1a, r24	; 26
    DDRA &=~((1<<PA2)|(1<<PA3)|(1<<PA7));						// PA0 als Eingang
  60:	8a b3       	in	r24, 0x1a	; 26
  62:	83 77       	andi	r24, 0x73	; 115
  64:	8a bb       	out	0x1a, r24	; 26
	DDRD &=~(1<<PD0);
  66:	88 98       	cbi	0x11, 0	; 17
	DDRD |=(1<<2);
  68:	8a 9a       	sbi	0x11, 2	; 17
	PORTD &=~(1<<2);
  6a:	92 98       	cbi	0x12, 2	; 18
  6c:	08 95       	ret

0000006e <timer_init>:

}

void timer_init(void){
	
	TCCR0=0b00100001; 					//löscht output-compare bei Überlauf
  6e:	81 e2       	ldi	r24, 0x21	; 33
  70:	83 bf       	out	0x33, r24	; 51
	TIMSK|=(1<<TOIE0); 					//Interrupt bei Overflow (TCNT0 gleich OCR0 (Vergleich))
  72:	89 b7       	in	r24, 0x39	; 57
  74:	82 60       	ori	r24, 0x02	; 2
  76:	89 bf       	out	0x39, r24	; 57
  78:	08 95       	ret

0000007a <UART_init>:
}


void UART_init (void){

	UBRRH = 0;
  7a:	10 bc       	out	0x20, r1	; 32
	UBRRL = 1;							// Baudrate = 250kbit/s
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	89 b9       	out	0x09, r24	; 9
	UCSRA=0;
  80:	1b b8       	out	0x0b, r1	; 11
	UCSRB=(1<<RXCIE)|(1<<RXEN);			// receive interrupt enable, receive enable
  82:	80 e9       	ldi	r24, 0x90	; 144
  84:	8a b9       	out	0x0a, r24	; 10
	UCSRC=(1<<URSEL)|(1<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
  86:	8e e8       	ldi	r24, 0x8E	; 142
  88:	80 bd       	out	0x20, r24	; 32
  8a:	08 95       	ret

0000008c <anfangszustand>:


void anfangszustand(void){


	PORTA&=~((1<<PA0)|(1<<PA1)|(1<<PA4)|(1<<PA5)|(1<<PA6));
  8c:	8b b3       	in	r24, 0x1b	; 27
  8e:	8c 78       	andi	r24, 0x8C	; 140
  90:	8b bb       	out	0x1b, r24	; 27
	red_pwm=0;								// festlegen der PWM Schaltschwelle 0...30 -> High, 31...255 -> Low
  92:	10 92 73 00 	sts	0x0073, r1
  96:	10 92 72 00 	sts	0x0072, r1
	green_pwm=0;							// festlegen der PWM Schaltschwelle 0...30 -> High, 31...255 -> Low									
  9a:	10 92 76 00 	sts	0x0076, r1
  9e:	10 92 75 00 	sts	0x0075, r1
	blue_pwm=0;							// festlegen der PWM Schaltschwelle 0...30 -> High, 31...255 -> Low
  a2:	10 92 7a 00 	sts	0x007A, r1
  a6:	10 92 79 00 	sts	0x0079, r1
	servo1_pwm=190;							// Servo unten
  aa:	8e eb       	ldi	r24, 0xBE	; 190
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	90 93 71 00 	sts	0x0071, r25
  b2:	80 93 70 00 	sts	0x0070, r24
	servo2_pwm=200;
  b6:	88 ec       	ldi	r24, 0xC8	; 200
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 78 00 	sts	0x0078, r25
  be:	80 93 77 00 	sts	0x0077, r24
  c2:	08 95       	ret

000000c4 <__vector_7>:


}

ISR(TIMER0_OVF_vect){
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	2f 93       	push	r18
  d0:	3f 93       	push	r19
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25

 volatile static int pwm_count=0;		// zählvariable für den PWM-Schritt

	if (pwm_count<=255){				// wenn PWM_counter unter 255 ist, führe PORTA beschaltung aus
  d6:	80 91 6c 00 	lds	r24, 0x006C
  da:	90 91 6d 00 	lds	r25, 0x006D
  de:	8f 3f       	cpi	r24, 0xFF	; 255
  e0:	91 05       	cpc	r25, r1
  e2:	11 f0       	breq	.+4      	; 0xe8 <__vector_7+0x24>
  e4:	0c f0       	brlt	.+2      	; 0xe8 <__vector_7+0x24>
  e6:	74 c0       	rjmp	.+232    	; 0x1d0 <__vector_7+0x10c>
		
		if(pwm_count<=red_pwm){			// wenn PWM_counter kleiner als PWM Schaltschwelle
  e8:	20 91 6c 00 	lds	r18, 0x006C
  ec:	30 91 6d 00 	lds	r19, 0x006D
  f0:	80 91 72 00 	lds	r24, 0x0072
  f4:	90 91 73 00 	lds	r25, 0x0073
  f8:	82 17       	cp	r24, r18
  fa:	93 07       	cpc	r25, r19
  fc:	14 f0       	brlt	.+4      	; 0x102 <__vector_7+0x3e>
			PORTA|=(1<<PA4);			// schalte PA0 ein
  fe:	dc 9a       	sbi	0x1b, 4	; 27
 100:	01 c0       	rjmp	.+2      	; 0x104 <__vector_7+0x40>
			pwm_count++;				// inkrementiere PWM_Counter
		}
		else{
			PORTA&=~(1<<PA4);			// wenn PWM_Counter größer als PWM Schaltschwelle schalte PA0 aus
 102:	dc 98       	cbi	0x1b, 4	; 27
			pwm_count++;				// Inkrementiere PWM_Counter
 104:	80 91 6c 00 	lds	r24, 0x006C
 108:	90 91 6d 00 	lds	r25, 0x006D
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	90 93 6d 00 	sts	0x006D, r25
 112:	80 93 6c 00 	sts	0x006C, r24
		}
	
		if(pwm_count<=green_pwm){			// wenn PWM_counter kleiner als PWM Schaltschwelle
 116:	20 91 6c 00 	lds	r18, 0x006C
 11a:	30 91 6d 00 	lds	r19, 0x006D
 11e:	80 91 75 00 	lds	r24, 0x0075
 122:	90 91 76 00 	lds	r25, 0x0076
 126:	82 17       	cp	r24, r18
 128:	93 07       	cpc	r25, r19
 12a:	14 f0       	brlt	.+4      	; 0x130 <__vector_7+0x6c>
			PORTA|=(1<<PA5);			// schalte PA0 ein
 12c:	dd 9a       	sbi	0x1b, 5	; 27
 12e:	01 c0       	rjmp	.+2      	; 0x132 <__vector_7+0x6e>
			pwm_count++;				// inkrementiere PWM_Counter
		}
		else{
			PORTA&=~(1<<PA5);			// wenn PWM_Counter größer als PWM Schaltschwelle schalte PA0 aus
 130:	dd 98       	cbi	0x1b, 5	; 27
			pwm_count++;				// Inkrementiere PWM_Counter
 132:	80 91 6c 00 	lds	r24, 0x006C
 136:	90 91 6d 00 	lds	r25, 0x006D
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	90 93 6d 00 	sts	0x006D, r25
 140:	80 93 6c 00 	sts	0x006C, r24
		}

		if(pwm_count<=blue_pwm){			// wenn PWM_counter kleiner als PWM Schaltschwelle
 144:	20 91 6c 00 	lds	r18, 0x006C
 148:	30 91 6d 00 	lds	r19, 0x006D
 14c:	80 91 79 00 	lds	r24, 0x0079
 150:	90 91 7a 00 	lds	r25, 0x007A
 154:	82 17       	cp	r24, r18
 156:	93 07       	cpc	r25, r19
 158:	14 f0       	brlt	.+4      	; 0x15e <__vector_7+0x9a>
			PORTA|=(1<<PA6);			// schalte PA0 ein
 15a:	de 9a       	sbi	0x1b, 6	; 27
 15c:	01 c0       	rjmp	.+2      	; 0x160 <__vector_7+0x9c>
			pwm_count++;				// inkrementiere PWM_Counter
		}
		else{
			PORTA&=~(1<<PA6);			// wenn PWM_Counter größer als PWM Schaltschwelle schalte PA0 aus
 15e:	de 98       	cbi	0x1b, 6	; 27
			pwm_count++;				// Inkrementiere PWM_Counter
 160:	80 91 6c 00 	lds	r24, 0x006C
 164:	90 91 6d 00 	lds	r25, 0x006D
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	90 93 6d 00 	sts	0x006D, r25
 16e:	80 93 6c 00 	sts	0x006C, r24
		}

		if(pwm_count<=servo1_pwm){			// wenn PWM_counter kleiner als PWM Schaltschwelle
 172:	20 91 6c 00 	lds	r18, 0x006C
 176:	30 91 6d 00 	lds	r19, 0x006D
 17a:	80 91 70 00 	lds	r24, 0x0070
 17e:	90 91 71 00 	lds	r25, 0x0071
 182:	82 17       	cp	r24, r18
 184:	93 07       	cpc	r25, r19
 186:	14 f0       	brlt	.+4      	; 0x18c <__vector_7+0xc8>
			PORTA|=(1<<PA0);			// schalte PA0 ein
 188:	d8 9a       	sbi	0x1b, 0	; 27
 18a:	01 c0       	rjmp	.+2      	; 0x18e <__vector_7+0xca>
			pwm_count++;				// inkrementiere PWM_Counter
		}
		else{
			PORTA&=~(1<<PA0);			// wenn PWM_Counter größer als PWM Schaltschwelle schalte PA0 aus
 18c:	d8 98       	cbi	0x1b, 0	; 27
			pwm_count++;				// Inkrementiere PWM_Counter
 18e:	80 91 6c 00 	lds	r24, 0x006C
 192:	90 91 6d 00 	lds	r25, 0x006D
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	90 93 6d 00 	sts	0x006D, r25
 19c:	80 93 6c 00 	sts	0x006C, r24
		}

		if(pwm_count<=servo2_pwm){			// wenn PWM_counter kleiner als PWM Schaltschwelle
 1a0:	20 91 6c 00 	lds	r18, 0x006C
 1a4:	30 91 6d 00 	lds	r19, 0x006D
 1a8:	80 91 77 00 	lds	r24, 0x0077
 1ac:	90 91 78 00 	lds	r25, 0x0078
 1b0:	82 17       	cp	r24, r18
 1b2:	93 07       	cpc	r25, r19
 1b4:	14 f0       	brlt	.+4      	; 0x1ba <__vector_7+0xf6>
			PORTA|=(1<<PA1);			// schalte PA0 ein
 1b6:	d9 9a       	sbi	0x1b, 1	; 27
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <__vector_7+0xf8>
			pwm_count++;				// inkrementiere PWM_Counter
		}
		else{
			PORTA&=~(1<<PA1);			// wenn PWM_Counter größer als PWM Schaltschwelle schalte PA0 aus
 1ba:	d9 98       	cbi	0x1b, 1	; 27
			pwm_count++;				// Inkrementiere PWM_Counter
 1bc:	80 91 6c 00 	lds	r24, 0x006C
 1c0:	90 91 6d 00 	lds	r25, 0x006D
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	90 93 6d 00 	sts	0x006D, r25
 1ca:	80 93 6c 00 	sts	0x006C, r24
 1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <__vector_7+0x114>
		}
		

	}
	else{
		pwm_count=0;					// wenn PWM_Counter = 255 setze ihn wieder zu 0 (eine Periode abgeschlossen)
 1d0:	10 92 6d 00 	sts	0x006D, r1
 1d4:	10 92 6c 00 	sts	0x006C, r1
		}

}
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	3f 91       	pop	r19
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <__vector_9>:


ISR (USART_RX_vect){
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	4f 93       	push	r20
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
	
	cli();
 1fe:	f8 94       	cli
	static uint16_t DmxCount;
	uint8_t USARTstate = UCSRA;
 200:	9b b1       	in	r25, 0x0b	; 11
	uint8_t DmxByte = UDR;
 202:	4c b1       	in	r20, 0x0c	; 12
	uint8_t DmxState = gDmxState;
 204:	80 91 74 00 	lds	r24, 0x0074
	//int muell = 0;

	if(USARTstate&(1<<4)){					// schaut nach breake
 208:	94 ff       	sbrs	r25, 4
 20a:	0b c0       	rjmp	.+22     	; 0x222 <__vector_9+0x38>
		UCSRA &=~(1<<FE);
 20c:	5c 98       	cbi	0x0b, 4	; 11
		DmxCount = 1;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	90 93 6f 00 	sts	0x006F, r25
 216:	80 93 6e 00 	sts	0x006E, r24
		gDmxState = 1;					// BREAK
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 74 00 	sts	0x0074, r24
		return;
 220:	5e c0       	rjmp	.+188    	; 0x2de <__stack+0x7f>
		}

	
	else if(DmxState==1){				// BREAK
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	21 f4       	brne	.+8      	; 0x22e <__vector_9+0x44>
		if (DmxByte==0) gDmxState = 2;	// STARTBYTE		
 226:	41 11       	cpse	r20, r1
 228:	57 c0       	rjmp	.+174    	; 0x2d8 <__stack+0x79>
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	19 c0       	rjmp	.+50     	; 0x260 <__stack+0x1>
		else gDmxState = 0;				// IDLE
		}


	else if(DmxState==2){				//STARTBYTE	
 22e:	82 30       	cpi	r24, 0x02	; 2
 230:	d1 f4       	brne	.+52     	; 0x266 <__stack+0x7>
		if(--DmxCount == 0){
 232:	80 91 6e 00 	lds	r24, 0x006E
 236:	90 91 6f 00 	lds	r25, 0x006F
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	90 93 6f 00 	sts	0x006F, r25
 240:	80 93 6e 00 	sts	0x006E, r24
 244:	89 2b       	or	r24, r25
 246:	09 f0       	breq	.+2      	; 0x24a <__vector_9+0x60>
 248:	49 c0       	rjmp	.+146    	; 0x2dc <__stack+0x7d>
			DmxCount = 1;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	90 93 6f 00 	sts	0x006F, r25
 252:	80 93 6e 00 	sts	0x006E, r24
			servo1_pwm = DmxByte;
 256:	40 93 70 00 	sts	0x0070, r20
 25a:	10 92 71 00 	sts	0x0071, r1
			gDmxState = 3;				//STARTADRESSE
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	80 93 74 00 	sts	0x0074, r24
 264:	3b c0       	rjmp	.+118    	; 0x2dc <__stack+0x7d>
			}
		}

	else if(DmxState==3){
 266:	83 30       	cpi	r24, 0x03	; 3
 268:	c9 f5       	brne	.+114    	; 0x2dc <__stack+0x7d>
		DmxCount++;
 26a:	80 91 6e 00 	lds	r24, 0x006E
 26e:	90 91 6f 00 	lds	r25, 0x006F
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	90 93 6f 00 	sts	0x006F, r25
 278:	80 93 6e 00 	sts	0x006E, r24
		if(DmxCount==kanal_servo2)servo2_pwm = DmxByte;	
 27c:	20 91 60 00 	lds	r18, 0x0060
 280:	30 91 61 00 	lds	r19, 0x0061
 284:	82 17       	cp	r24, r18
 286:	93 07       	cpc	r25, r19
 288:	21 f4       	brne	.+8      	; 0x292 <__stack+0x33>
 28a:	40 93 77 00 	sts	0x0077, r20
 28e:	10 92 78 00 	sts	0x0078, r1
		if(DmxCount==3);//muell = DmxByte;
		if(DmxCount==kanal_red)red_pwm = DmxByte;
 292:	20 91 68 00 	lds	r18, 0x0068
 296:	30 91 69 00 	lds	r19, 0x0069
 29a:	82 17       	cp	r24, r18
 29c:	93 07       	cpc	r25, r19
 29e:	21 f4       	brne	.+8      	; 0x2a8 <__stack+0x49>
 2a0:	40 93 72 00 	sts	0x0072, r20
 2a4:	10 92 73 00 	sts	0x0073, r1
		if(DmxCount==kanal_green)green_pwm = DmxByte;
 2a8:	20 91 66 00 	lds	r18, 0x0066
 2ac:	30 91 67 00 	lds	r19, 0x0067
 2b0:	82 17       	cp	r24, r18
 2b2:	93 07       	cpc	r25, r19
 2b4:	21 f4       	brne	.+8      	; 0x2be <__stack+0x5f>
 2b6:	40 93 75 00 	sts	0x0075, r20
 2ba:	10 92 76 00 	sts	0x0076, r1
		if(DmxCount==kanal_blue)blue_pwm = DmxByte;	
 2be:	20 91 64 00 	lds	r18, 0x0064
 2c2:	30 91 65 00 	lds	r19, 0x0065
 2c6:	82 17       	cp	r24, r18
 2c8:	93 07       	cpc	r25, r19
 2ca:	21 f4       	brne	.+8      	; 0x2d4 <__stack+0x75>
 2cc:	40 93 79 00 	sts	0x0079, r20
 2d0:	10 92 7a 00 	sts	0x007A, r1
		if(DmxCount>=7) gDmxState = 0;	// IDLE
 2d4:	07 97       	sbiw	r24, 0x07	; 7
 2d6:	10 f0       	brcs	.+4      	; 0x2dc <__stack+0x7d>
 2d8:	10 92 74 00 	sts	0x0074, r1
		}

	sei();
 2dc:	78 94       	sei
	return;
}
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	4f 91       	pop	r20
 2e4:	3f 91       	pop	r19
 2e6:	2f 91       	pop	r18
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <main>:


int main(void){

	datadirec_init();
 2f2:	b3 de       	rcall	.-666    	; 0x5a <datadirec_init>
	timer_init();
 2f4:	bc de       	rcall	.-648    	; 0x6e <timer_init>
	UART_init();
 2f6:	c1 de       	rcall	.-638    	; 0x7a <UART_init>
	anfangszustand();
 2f8:	c9 de       	rcall	.-622    	; 0x8c <anfangszustand>
	gDmxState = 0;
 2fa:	10 92 74 00 	sts	0x0074, r1
	sei();
 2fe:	78 94       	sei
 300:	ff cf       	rjmp	.-2      	; 0x300 <main+0xe>

00000302 <_exit>:
 302:	f8 94       	cli

00000304 <__stop_program>:
 304:	ff cf       	rjmp	.-2      	; 0x304 <__stop_program>
